#!/bin/bash



argc=${#};
argv=();


CR=$'\x0d'
LF=$'\x0a'




paramID=1;

 

while [ ${paramID} -le ${argc} ]; do
	item_ID=$[${paramID}-1];
	argv[${item_ID}]=${!paramID};
#	echo "i=${paramID}; argv[i]=${argv[${item_ID}]}";
	paramID=$[${paramID}+1];
done

 


 

THREAD_IDS=();
THREAD_TIDS=();
THREAD_CMDS=();
THREAD_OUTPS=();


function newThread {

	local fd="";
	local outFile="";
	local cmd="";
	local tID="";

	[ -z "$1" ] && { echo "E: Thread command not given" >&2; return 1; }

	echo "STARTING THREAD: [${1}]"

	cmd="${1}";
	tID=$[${#THREAD_IDS[@]}]
	openFile;
	fd=$?;
	outFile="/proc/$$/fd/${fd}";

	THREAD_IDS[${tID}]="${fd}"
	THREAD_OUTPS[${tID}]="${outFile}";
	THREAD_CMDS[${tID}]="${cmd}";

	{ eval "${cmd}" >${outFile} 2>&1 ; } &

	THREAD_TIDS[${tID}]="${!}";
}





function removeWord {
    local list=${1}
    local word=${2}
    
    echo ${list} | tr ' ' '\n' | egrep -vw "${word}"
}


function waitAll {

	local RUNNING="";
	local step=".1"
	local timeout=0;

	for ((i=0; i<${argc}; i++)); do
		RUNNING="${RUNNING} ${THREAD_TIDS[${i}]}";
	done

	while [ $(countWords ${RUNNING}) -gt 0 ]; do
		for tid in ${RUNNING}; do ## this will sometimes cause a problem when there are 2 similar PIDs. VERY rare
			#[ ! -d "/proc/${tid}" ] && RUNNING=${RUNNING//${tid}/}
            [ ! -d "/proc/${tid}" ] && RUNNING=$(removeWord "${RUNNING}" "${tid}")
		done
		#timeout=$[${timeout}]
		sleep "${step}"
	done
}


function printAll {
	
	local BUFFER="";
	
	for ((i=0; i<${argc}; i++)); do
	
		id=${THREAD_IDS[${i}]};
	
		BUFFER="${BUFFER}Thread ID:      [${id}]${LF}";
		BUFFER="${BUFFER}Thread[${id}] TID: [${THREAD_TIDS[${i}]}]${LF}"
		BUFFER="${BUFFER}Thread[${id}] CMD: [${THREAD_CMDS[${i}]}]${LF}";
		BUFFER="${BUFFER}Thread[${id}] OUT: [${THREAD_OUTPS[${i}]}]${LF}";
		#cat "${THREAD_OUTPS[${i}]}" |sed -e 's/^/T\['${id}'\]_OUTPUT: /g'
		#OUTP=$(< "${THREAD_OUTPS[${i}]}")
		#echo "${OUTP}" |sed -e 's/^/T\['${id}'\]_OUTPUT\| /g'
		#echo "====================================";
		BUFFER="${BUFFER}$(< "${THREAD_OUTPS[${i}]}")${LF}"
		BUFFER="${BUFFER}============[EOT]===========${LF}";
		BUFFER="${BUFFER}${LF}"
	done
	
	echo  "${BUFFER}"

}



function countWords {
	echo $#;
}


function openFile {

	local nextFD=$[$(ls /proc/$$/fd |sort |tail -1)+1];
	local name="__tempFile__${RANDOM}";
	local file="/tmp/${name}";

	
	[ ! -z ${1} ] && file="${1}"

	> ${file};
	eval "exec ${nextFD}<>${file}";
	rm -f ${file}
	
	return ${nextFD}
}

 
function openFifo {

	local nextFD=$[$(ls /proc/$$/fd |sort |tail -1)+1];
	local name="__fifoFile__${RANDOM}";
	local file="/tmp/${name}";

	[ ! -z ${1} ] && file="${1}"

	mkfifo -m 700 ${file};
	eval "exec ${nextFD}<>${file}";
	rm -f ${file}

	return ${nextFD}
}

function closeFD {
	[ -z $1 ] && return 1;
	eval "exec ${1} >&-"
}
 




#echo "argc=${argc}"



for ((i=0; i<${argc}; i++)); do
#	echo "ARGV[${i}]=${argv[${i}]}";
	newThread "${argv[${i}]}";

done


#sleep 2

waitAll;

echo
#echo "______________________________"
#echo "=============================="
echo "=============================="
echo

printAll;
